
--- on Java 11 - Hotspot -----
 8294054550.000 ns/op


Result "measures.in.graalvm.MyBenchmark.testMethod":
  9646608120.000 ±(99.9%) 3147882620.561 ns/op [Average]
  (min, avg, max) = (8294054550.000, 9646608120.000, 10380846200.000), stdev = 817495120.030
  CI (99.9%): [6498725499.439, 12794490740.561] (assumes normal distribution)


# Run complete. Total time: 00:02:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark               Mode  Cnt           Score            Error  Units
MyBenchmark.testMethod  avgt    5  9646608120.000 ± 3147882620.561  ns/op



--- on GraalVM  enabling (by default) Graal compiler ----- 
9789597650.000 ns/op


Result "measures.in.graalvm.MyBenchmark.testMethod":
  11592375570.000 ±(99.9%) 9838752105.526 ns/op [Average]
  (min, avg, max) = (9545492100.000, 11592375570.000, 15470768600.000), stdev = 2555092677.509
  CI (99.9%): [1753623464.474, 21431127675.526] (assumes normal distribution)


# Run complete. Total time: 00:02:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark               Mode  Cnt            Score            Error  Units
MyBenchmark.testMethod  avgt    5  11592375570.000 ± 9838752105.526  ns/op


 